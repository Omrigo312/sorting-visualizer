{"version":3,"sources":["redux/actionTypes.ts","redux/AppState.ts","redux/store.ts","redux/reducer.ts","consts.ts","algorithms/mergeSort.ts","algorithms/bubbleSort.ts","algorithms/quickSort.ts","algorithms/insertionSort.ts","components/body/Body.tsx","images/icon.png","components/navbar/NavBar.tsx","index.tsx"],"names":["ActionType","buildArray","arraySize","array","i","push","Math","floor","random","store","createStore","state","action","type","payload","SET_ARRAY_SIZE","SET_SPEED","START_SORT","END_SORT","NEW_ARRAY","UPDATE_ARRAY","SET_BUBBLE_CURRENT_NODE","SET_BUBBLE_SWITCH_NODE","SET_MERGE_CHOSEN_NODE","SET_MERGE_COMPARISON_PAIR","SET_MERGE_COUNTER_GROUP","SET_MERGE_LEFT_GROUP","SET_MERGE_RIGHT_GROUP","SET_SORTING_ALGORITHM","SET_QUICK_CHECK_NODE","SET_QUICK_CHOSEN_NODE","SET_QUICK_PIVOT_NODE","SET_QUICK_SUB_ARRAY","SET_QUICK_SWAP_NODE","SET_INSERTION_CURRENT_NODE","SET_INSERTION_SWITCH_NODE","speed","isSorting","bubbleCurrentNode","bubbleSwitchNode","mergeChosenNode","mergeComparisonPair","mergeCounterGroup","mergeLeftGroup","mergeRightGroup","quickCheckNode","quickChosenNode","quickPivotNode","quickSubArray","quickSwapNode","insertionCurrentNode","insertionSwitchNode","sortingAlgorithm","this","BUBBLE_SORT","MERGE_SORT","QUICK_SORT","INSERTION_SORT","delay","getState","delayTime","Promise","resolve","reject","setTimeout","createMergeGroup","start","end","group","merge","dispatch","leftStart","leftEnd","rightStart","rightEnd","a","temp","index","mergeSort","length","compareSize","pivot","j","bubbleSort","sorted","b","tmp","createSubArray","subArray","partition","quickSort","auxStack","pop","insertionSort","key","Body","useSelector","currentNode","switchNode","useState","window","innerWidth","windowWidth","setWindowWidth","useDispatch","useEffect","addEventListener","event","target","width","margin","fontSize","nodeColor","currentNodeColor","switchNodeColor","groupColor1","chosenNodeColor","determineNodeColor","id","map","value","className","style","height","marginLeft","marginRight","backgroundColor","color","NavBar","changeArraySize","newArraySize","changeSpeed","newSpeed","setSortingAlgorithm","AppBar","position","Toolbar","minHeight","Grid","container","spacing","item","xs","src","icon","alt","Typography","gutterBottom","IconButton","aria-label","paddingTop","onClick","Slider","step","valueLabelDisplay","min","max","onChange","_event","Button","variant","onSortButtonClicked","endIcon","textAlign","ToggleButtonGroup","orientation","exclusive","ToggleButton","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3501e293.chunk.js","sourcesContent":["export enum ActionType {\r\n  SET_SPEED,\r\n  SET_ARRAY_SIZE,\r\n  START_SORT,\r\n  END_SORT,\r\n  NEW_ARRAY,\r\n  UPDATE_ARRAY,\r\n  SET_SORTING_ALGORITHM,\r\n  SET_BUBBLE_CURRENT_NODE,\r\n  SET_BUBBLE_SWITCH_NODE,\r\n  SET_MERGE_LEFT_GROUP,\r\n  SET_MERGE_RIGHT_GROUP,\r\n  SET_MERGE_COMPARISON_PAIR,\r\n  SET_MERGE_CHOSEN_NODE,\r\n  SET_MERGE_COUNTER_GROUP,\r\n  SET_QUICK_PIVOT_NODE,\r\n  SET_QUICK_SUB_ARRAY,\r\n  SET_QUICK_CHECK_NODE,\r\n  SET_QUICK_CHOSEN_NODE,\r\n  SET_QUICK_SWAP_NODE,\r\n  SET_INSERTION_CURRENT_NODE,\r\n  SET_INSERTION_SWITCH_NODE,\r\n}\r\n","export const buildArray = (arraySize: number) => {\r\n  let array = [];\r\n  for (let i = 0; i < arraySize; i++) {\r\n    array.push(Math.floor(Math.random() * 100 + 1));\r\n  }\r\n  return array;\r\n};\r\n\r\nexport class AppState {\r\n  public arraySize: number = 25;\r\n  public array: number[] = buildArray(this.arraySize);\r\n  public speed: number = 50;\r\n  public isSorting: boolean = false;\r\n  public sortingAlgorithm: string = 'BUBBLE_SORT';\r\n  public bubbleCurrentNode: number = -1;\r\n  public bubbleSwitchNode: number = -1;\r\n  public mergeLeftGroup: object = {};\r\n  public mergeRightGroup: object = {};\r\n  public mergeComparisonPair: object = {};\r\n  public mergeCounterGroup: any = {};\r\n  public mergeChosenNode: number = -1;\r\n  public quickPivotNode: number = -1;\r\n  public quickSubArray: object = {};\r\n  public quickCheckNode: number = -1;\r\n  public quickChosenNode: number = -1;\r\n  public quickSwapNode: number = -1;\r\n  public insertionCurrentNode: number = -1;\r\n  public insertionSwitchNode: number = -1;\r\n}\r\n","import { createStore } from 'redux';\r\nimport { AppState } from './AppState';\r\nimport { reducer } from './reducer';\r\n\r\nexport const store = createStore(reducer, new AppState());\r\n","import { Action } from './IAction';\r\nimport { ActionType } from './actionTypes';\r\nimport { AppState, buildArray } from './AppState';\r\n\r\nexport function reducer(state: AppState, action: Action): AppState {\r\n  const { type, payload } = action;\r\n  const {\r\n    SET_ARRAY_SIZE,\r\n    SET_SPEED,\r\n    START_SORT,\r\n    END_SORT,\r\n    NEW_ARRAY,\r\n    UPDATE_ARRAY,\r\n    SET_BUBBLE_CURRENT_NODE,\r\n    SET_BUBBLE_SWITCH_NODE,\r\n    SET_MERGE_CHOSEN_NODE,\r\n    SET_MERGE_COMPARISON_PAIR,\r\n    SET_MERGE_COUNTER_GROUP,\r\n    SET_MERGE_LEFT_GROUP,\r\n    SET_MERGE_RIGHT_GROUP,\r\n    SET_SORTING_ALGORITHM,\r\n    SET_QUICK_CHECK_NODE,\r\n    SET_QUICK_CHOSEN_NODE,\r\n    SET_QUICK_PIVOT_NODE,\r\n    SET_QUICK_SUB_ARRAY,\r\n    SET_QUICK_SWAP_NODE,\r\n    SET_INSERTION_CURRENT_NODE,\r\n    SET_INSERTION_SWITCH_NODE,\r\n  } = ActionType;\r\n  switch (type) {\r\n    case SET_SPEED:\r\n      return {\r\n        ...state,\r\n        speed: payload,\r\n      };\r\n    case SET_ARRAY_SIZE:\r\n      return {\r\n        ...state,\r\n        arraySize: payload,\r\n      };\r\n    case START_SORT:\r\n      return {\r\n        ...state,\r\n        isSorting: true,\r\n      };\r\n    case END_SORT:\r\n      return {\r\n        ...state,\r\n        isSorting: false,\r\n        bubbleCurrentNode: -1,\r\n        bubbleSwitchNode: -1,\r\n        mergeChosenNode: -1,\r\n        mergeComparisonPair: {},\r\n        mergeCounterGroup: {},\r\n        mergeLeftGroup: {},\r\n        mergeRightGroup: {},\r\n        quickCheckNode: -1,\r\n        quickChosenNode: -1,\r\n        quickPivotNode: -1,\r\n        quickSubArray: {},\r\n        quickSwapNode: -1,\r\n        insertionCurrentNode: -1,\r\n        insertionSwitchNode: -1,\r\n      };\r\n    case NEW_ARRAY:\r\n      return {\r\n        ...state,\r\n        isSorting: false,\r\n        array: buildArray(state.arraySize),\r\n      };\r\n    case UPDATE_ARRAY:\r\n      return {\r\n        ...state,\r\n        array: payload,\r\n      };\r\n    case SET_SORTING_ALGORITHM:\r\n      return {\r\n        ...state,\r\n        sortingAlgorithm: payload,\r\n      };\r\n    case SET_BUBBLE_CURRENT_NODE:\r\n      return {\r\n        ...state,\r\n        bubbleCurrentNode: payload,\r\n      };\r\n    case SET_BUBBLE_SWITCH_NODE:\r\n      return {\r\n        ...state,\r\n        bubbleSwitchNode: payload,\r\n      };\r\n    case SET_MERGE_LEFT_GROUP:\r\n      return {\r\n        ...state,\r\n        mergeLeftGroup: payload,\r\n      };\r\n    case SET_MERGE_RIGHT_GROUP:\r\n      return {\r\n        ...state,\r\n        mergeRightGroup: payload,\r\n      };\r\n    case SET_MERGE_COMPARISON_PAIR:\r\n      return {\r\n        ...state,\r\n        mergeComparisonPair: payload,\r\n      };\r\n    case SET_MERGE_COUNTER_GROUP:\r\n      return {\r\n        ...state,\r\n        mergeCounterGroup: payload,\r\n      };\r\n    case SET_MERGE_CHOSEN_NODE:\r\n      return {\r\n        ...state,\r\n        mergeChosenNode: payload,\r\n      };\r\n    case SET_QUICK_PIVOT_NODE:\r\n      return {\r\n        ...state,\r\n        quickPivotNode: payload,\r\n      };\r\n    case SET_QUICK_SUB_ARRAY:\r\n      return {\r\n        ...state,\r\n        quickSubArray: payload,\r\n      };\r\n    case SET_QUICK_SWAP_NODE:\r\n      return {\r\n        ...state,\r\n        quickSwapNode: payload,\r\n      };\r\n    case SET_QUICK_CHECK_NODE:\r\n      return {\r\n        ...state,\r\n        quickCheckNode: payload,\r\n      };\r\n    case SET_QUICK_CHOSEN_NODE:\r\n      return {\r\n        ...state,\r\n        quickChosenNode: payload,\r\n      };\r\n    case SET_INSERTION_CURRENT_NODE:\r\n      return {\r\n        ...state,\r\n        insertionCurrentNode: payload,\r\n      };\r\n    case SET_INSERTION_SWITCH_NODE:\r\n      return {\r\n        ...state,\r\n        insertionSwitchNode: payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { store } from './redux/store';\r\n\r\nexport const MIN_ARRAY_SIZE = 5;\r\nexport const MAX_ARRAY_SIZE = 50;\r\nexport const ARRAY_SIZE_SLIDER_JUMP = 5;\r\nexport const MIN_SPEED = 1;\r\nexport const MAX_SPEED = 100;\r\nexport const SPEED_SLIDER_JUMP = 1;\r\nexport const BUBBLE_SORT = 'BUBBLE_SORT';\r\nexport const MERGE_SORT = 'MERGE_SORT';\r\nexport const QUICK_SORT = 'QUICK_SORT';\r\nexport const INSERTION_SORT = 'INSERTION_SORT';\r\n\r\nexport const delay = () => {\r\n  const { isSorting, speed } = store.getState();\r\n  const delayTime = Math.floor((100 - speed) * 5) + 1;\r\n  return new Promise((resolve, reject) => {\r\n    if (!isSorting) reject();\r\n    else setTimeout(resolve, delayTime);\r\n  });\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { delay } from '../consts';\r\nimport { ActionType } from '../redux/actionTypes';\r\nimport { store } from '../redux/store';\r\n\r\nconst createMergeGroup = (start: number, end: number) => {\r\n  let group: { [key: number]: boolean } = {};\r\n  for (let i = start; i <= end; i++) {\r\n    group[i] = true;\r\n  }\r\n  return group;\r\n};\r\n\r\nconst merge = async (\r\n  dispatch: Dispatch,\r\n  array: number[],\r\n  leftStart: number,\r\n  leftEnd: number,\r\n  rightStart: number,\r\n  rightEnd: number\r\n) => {\r\n  let temp: any = {};\r\n  let index = 0;\r\n  while (leftStart <= leftEnd && rightStart <= rightEnd) {\r\n    dispatch({ type: ActionType.SET_MERGE_COMPARISON_PAIR, payload: { [leftStart]: true, [rightStart]: true } });\r\n    await delay();\r\n    if (array[leftStart] <= array[rightStart]) {\r\n      dispatch({ type: ActionType.SET_MERGE_CHOSEN_NODE, payload: leftStart });\r\n      dispatch({\r\n        type: ActionType.SET_MERGE_COUNTER_GROUP,\r\n        payload: { ...store.getState().mergeCounterGroup, [leftStart]: index + 1 },\r\n      });\r\n      temp[index] = array[leftStart];\r\n      leftStart++;\r\n    } else {\r\n      dispatch({ type: ActionType.SET_MERGE_CHOSEN_NODE, payload: rightStart });\r\n      dispatch({\r\n        type: ActionType.SET_MERGE_COUNTER_GROUP,\r\n        payload: { ...store.getState().mergeCounterGroup, [rightStart]: index + 1 },\r\n      });\r\n      temp[index] = array[rightStart];\r\n      rightStart++;\r\n    }\r\n    await delay();\r\n    index++;\r\n  }\r\n\r\n  dispatch({ type: ActionType.SET_MERGE_COMPARISON_PAIR, payload: {} });\r\n\r\n  while (leftStart <= leftEnd) {\r\n    dispatch({ type: ActionType.SET_MERGE_CHOSEN_NODE, payload: leftStart });\r\n    dispatch({\r\n      type: ActionType.SET_MERGE_COUNTER_GROUP,\r\n      payload: { ...store.getState().mergeCounterGroup, [leftStart]: index + 1 },\r\n    });\r\n    await delay();\r\n    temp[index] = array[leftStart];\r\n    index++;\r\n    leftStart++;\r\n  }\r\n  while (rightStart <= rightEnd) {\r\n    dispatch({ type: ActionType.SET_MERGE_CHOSEN_NODE, payload: rightStart });\r\n    dispatch({\r\n      type: ActionType.SET_MERGE_COUNTER_GROUP,\r\n      payload: { ...store.getState().mergeCounterGroup, [rightStart]: index + 1 },\r\n    });\r\n    await delay();\r\n    temp[index] = array[rightStart];\r\n    index++;\r\n    rightStart++;\r\n  }\r\n  return temp;\r\n};\r\n\r\nexport const mergeSort = async (dispatch: Dispatch) => {\r\n  try {\r\n    let array = store.getState().array;\r\n    const length = array.length;\r\n    let compareSize = 1;\r\n    while (compareSize < length) {\r\n      let pivot = 0;\r\n      while (pivot < length) {\r\n        let leftStart = pivot;\r\n        let leftEnd = pivot + compareSize - 1;\r\n        let rightStart = pivot + compareSize;\r\n        let rightEnd = pivot + 2 * compareSize - 1;\r\n\r\n        dispatch({ type: ActionType.SET_MERGE_LEFT_GROUP, payload: createMergeGroup(leftStart, leftEnd) });\r\n        dispatch({ type: ActionType.SET_MERGE_RIGHT_GROUP, payload: createMergeGroup(rightStart, rightEnd) });\r\n\r\n        dispatch({ type: ActionType.SET_MERGE_COMPARISON_PAIR, payload: {} });\r\n        dispatch({ type: ActionType.SET_MERGE_COUNTER_GROUP, payload: {} });\r\n        dispatch({ type: ActionType.SET_MERGE_CHOSEN_NODE, payload: -1 });\r\n        await delay();\r\n\r\n        if (rightStart >= length) {\r\n          break;\r\n        }\r\n        if (rightEnd >= length) {\r\n          rightEnd = length - 1;\r\n        }\r\n        const temp: any = await merge(dispatch, array, leftStart, leftEnd, rightStart, rightEnd);\r\n\r\n        for (let j = 0; j < rightEnd - leftStart + 1; j++) {\r\n          array[pivot + j] = temp[j];\r\n        }\r\n\r\n        pivot += 2 * compareSize;\r\n      }\r\n      compareSize *= 2;\r\n    }\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  } catch (error) {\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { delay } from '../consts';\r\nimport { ActionType } from '../redux/actionTypes';\r\nimport { store } from '../redux/store';\r\n\r\nexport const bubbleSort = async (dispatch: Dispatch) => {\r\n  try {\r\n    let array = store.getState().array;\r\n    for (let a = 0; a < array.length; a++) {\r\n      let sorted = true;\r\n      await (async () => {\r\n        for (let b = 0; b < array.length; b++) {\r\n          dispatch({ type: ActionType.SET_BUBBLE_CURRENT_NODE, payload: b });\r\n          await delay();\r\n\r\n          if (array[b] > array[b + 1]) {\r\n            sorted = false;\r\n            dispatch({ type: ActionType.SET_BUBBLE_SWITCH_NODE, payload: b + 1 });\r\n            await delay();\r\n\r\n            if (!store.getState().isSorting) return dispatch({ type: ActionType.END_SORT });\r\n\r\n            // Switching nodes\r\n            const tmp = array[b];\r\n            array[b] = array[b + 1];\r\n            array[b + 1] = tmp;\r\n\r\n            dispatch({ type: ActionType.SET_BUBBLE_SWITCH_NODE, payload: b });\r\n            dispatch({ type: ActionType.SET_BUBBLE_CURRENT_NODE, payload: b + 1 });\r\n\r\n            await delay();\r\n            dispatch({ type: ActionType.SET_BUBBLE_SWITCH_NODE, payload: -1 });\r\n            dispatch({ type: ActionType.UPDATE_ARRAY, payload: array });\r\n          }\r\n        }\r\n      })();\r\n      if (sorted) break;\r\n    }\r\n\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  } catch (error) {\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { delay } from '../consts';\r\nimport { ActionType } from '../redux/actionTypes';\r\nimport { store } from '../redux/store';\r\n\r\nconst createSubArray = (start: number, end: number) => {\r\n  let subArray: { [key: number]: boolean } = {};\r\n  for (let i = start; i <= end; i++) {\r\n    subArray[i] = true;\r\n  }\r\n  return subArray;\r\n};\r\n\r\nconst partition = async (dispatch: Dispatch, array: number[], start: number, end: number) => {\r\n  dispatch({ type: ActionType.SET_QUICK_SUB_ARRAY, payload: createSubArray(start, end) });\r\n  await delay();\r\n\r\n  let i = start - 1; // index of smaller element\r\n  let pivot = array[end];\r\n\r\n  dispatch({ type: ActionType.SET_QUICK_SWAP_NODE, payload: i + 1 });\r\n  dispatch({ type: ActionType.SET_QUICK_PIVOT_NODE, payload: end });\r\n  await delay();\r\n\r\n  for (let j = start; j < end; j++) {\r\n    dispatch({ type: ActionType.SET_QUICK_CHECK_NODE, payload: j });\r\n    dispatch({ type: ActionType.SET_QUICK_SWAP_NODE, payload: i + 1 });\r\n    await delay();\r\n    if (array[j] <= pivot) {\r\n      dispatch({ type: ActionType.SET_QUICK_CHOSEN_NODE, payload: j });\r\n      await delay();\r\n      i++;\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n      dispatch({ type: ActionType.SET_QUICK_CHOSEN_NODE, payload: i });\r\n      await delay();\r\n      dispatch({ type: ActionType.SET_QUICK_SWAP_NODE, payload: i + 1 });\r\n      await delay();\r\n      dispatch({ type: ActionType.SET_QUICK_CHOSEN_NODE, payload: -1 });\r\n    }\r\n  }\r\n  [array[i + 1], array[end]] = [array[end], array[i + 1]]; // swap with pivot\r\n  return i + 1;\r\n};\r\n\r\nexport const quickSort = async (dispatch: Dispatch) => {\r\n  try {\r\n    let array = store.getState().array;\r\n    let start = 0;\r\n    let end = array.length - 1;\r\n\r\n    let auxStack = [];\r\n    auxStack.push(start, end);\r\n\r\n    while (auxStack.length) {\r\n      end = auxStack.pop();\r\n      start = auxStack.pop();\r\n\r\n      let pivot = await partition(dispatch, array, start, end);\r\n\r\n      if (pivot - 1 > start) {\r\n        auxStack.push(start, pivot - 1);\r\n      }\r\n\r\n      if (pivot + 1 < end) {\r\n        auxStack.push(pivot + 1, end);\r\n      }\r\n    }\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  } catch (error) {\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  }\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { delay } from '../consts';\r\nimport { ActionType } from '../redux/actionTypes';\r\nimport { store } from '../redux/store';\r\n\r\nexport const insertionSort = async (dispatch: Dispatch) => {\r\n  try {\r\n    let array = store.getState().array;\r\n    for (let i = 1; i < array.length; i++) {\r\n      dispatch({ type: ActionType.SET_INSERTION_CURRENT_NODE, payload: i });\r\n      await delay();\r\n\r\n      const key = array[i];\r\n\r\n      let j = i - 1;\r\n      while (j >= 0 && key < array[j]) {\r\n        dispatch({ type: ActionType.SET_INSERTION_SWITCH_NODE, payload: j+1 });\r\n        await delay();\r\n        array[j + 1] = array[j];\r\n        j--;\r\n        dispatch({ type: ActionType.SET_INSERTION_CURRENT_NODE, payload: -1 });\r\n        await delay();\r\n      }\r\n      array[j + 1] = key;\r\n      dispatch({ type: ActionType.SET_INSERTION_CURRENT_NODE, payload: j + 1 });\r\n      dispatch({ type: ActionType.SET_INSERTION_SWITCH_NODE, payload: -1 });\r\n      await delay();\r\n    }\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  } catch (error) {\r\n    return dispatch({ type: ActionType.END_SORT });\r\n  }\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ActionType } from '../../redux/actionTypes';\r\nimport './body.css';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport { mergeSort } from '../../algorithms/mergeSort';\r\nimport { bubbleSort } from '../../algorithms/bubbleSort';\r\nimport { BUBBLE_SORT, INSERTION_SORT, MERGE_SORT, QUICK_SORT } from '../../consts';\r\nimport { quickSort } from '../../algorithms/quickSort';\r\nimport { insertionSort } from '../../algorithms/insertionSort';\r\n\r\nexport default function Body() {\r\n  const arraySize = useSelector((state: any) => state.arraySize);\r\n  const isSorting = useSelector((state: any) => state.isSorting);\r\n  const array = useSelector((state: any) => state.array);\r\n  const sortingAlgorithm = useSelector((state: any) => state.sortingAlgorithm);\r\n\r\n  // Bubble sort\r\n  const currentNode = useSelector((state: any) => state.bubbleCurrentNode);\r\n  const switchNode = useSelector((state: any) => state.bubbleSwitchNode);\r\n\r\n  // Merge sort\r\n  const mergeLeftGroup = useSelector((state: any) => state.mergeLeftGroup);\r\n  const mergeRightGroup = useSelector((state: any) => state.mergeRightGroup);\r\n  const mergeComparisonPair = useSelector((state: any) => state.mergeComparisonPair);\r\n  const mergeChosenNode = useSelector((state: any) => state.mergeChosenNode);\r\n  const mergeCounterGroup = useSelector((state: any) => state.mergeCounterGroup);\r\n\r\n  // Quick sort\r\n  const quickPivotNode = useSelector((state: any) => state.quickPivotNode);\r\n  const quickSubArray = useSelector((state: any) => state.quickSubArray);\r\n  const quickCheckNode = useSelector((state: any) => state.quickCheckNode);\r\n  const quickChosenNode = useSelector((state: any) => state.quickChosenNode);\r\n  const quickSwapNode = useSelector((state: any) => state.quickSwapNode);\r\n\r\n  // Insertion sort\r\n  const insertionCurrentNode = useSelector((state: any) => state.insertionCurrentNode);\r\n  const insertionSwitchNode = useSelector((state: any) => state.insertionSwitchNode);\r\n\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isSorting) {\r\n      switch (sortingAlgorithm) {\r\n        case BUBBLE_SORT:\r\n          bubbleSort(dispatch);\r\n          break;\r\n        case MERGE_SORT:\r\n          mergeSort(dispatch);\r\n          break;\r\n        case QUICK_SORT:\r\n          quickSort(dispatch);\r\n          break;\r\n        case INSERTION_SORT:\r\n          insertionSort(dispatch);\r\n          break;\r\n        default:\r\n          bubbleSort(dispatch);\r\n          break;\r\n      }\r\n    }\r\n  }, [isSorting]);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.END_SORT });\r\n    dispatch({ type: ActionType.NEW_ARRAY });\r\n  }, [arraySize]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', (event: any) => setWindowWidth(event.target.innerWidth));\r\n  });\r\n\r\n  const width = Math.floor((windowWidth - 200) / array.length);\r\n  const margin = array.length < 5 ? 10 : 2;\r\n  const color = 'white';\r\n  const fontSize = width > 70 ? 20 : 8;\r\n  const nodeColor = 'rgba(66, 134, 244, .8)';\r\n  const currentNodeColor = 'rgba(0, 0, 0, .8)';\r\n  const switchNodeColor = 'rgba(100, 100, 100, 0.8)';\r\n  const groupColor1 = 'rgba(255, 153, 51, .6)';\r\n  const groupColor2 = 'rgba(153, 51, 255, .6)';\r\n  const chosenNodeColor = 'rgba(102, 255, 102, .6)';\r\n\r\n  const determineNodeColor = (index: number) => {\r\n    switch (sortingAlgorithm) {\r\n      case BUBBLE_SORT:\r\n        return index === currentNode ? currentNodeColor : index === switchNode ? switchNodeColor : nodeColor;\r\n      case MERGE_SORT:\r\n        return index === mergeChosenNode\r\n          ? chosenNodeColor\r\n          : mergeLeftGroup[index]\r\n          ? groupColor1\r\n          : mergeRightGroup[index]\r\n          ? groupColor2\r\n          : nodeColor;\r\n      case QUICK_SORT:\r\n        return index === quickPivotNode\r\n          ? currentNodeColor\r\n          : index === quickChosenNode\r\n          ? chosenNodeColor\r\n          : index === quickCheckNode\r\n          ? switchNodeColor\r\n          : quickSubArray[index]\r\n          ? groupColor1\r\n          : nodeColor;\r\n      case INSERTION_SORT:\r\n        return index === insertionCurrentNode\r\n          ? currentNodeColor\r\n          : index === insertionSwitchNode\r\n          ? switchNodeColor\r\n          : nodeColor;\r\n      default:\r\n        return nodeColor;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"bodyContainer\">\r\n      {array &&\r\n        array.map((value: number, index: number) => {\r\n          return (\r\n            <div\r\n              className=\"arrayElement\"\r\n              key={index}\r\n              style={{\r\n                height: `${value * 3}px`,\r\n                width: `${width}px`,\r\n                marginLeft: `${margin}px`,\r\n                marginRight: `${margin}px`,\r\n                backgroundColor: determineNodeColor(index),\r\n                color,\r\n                fontSize: `${fontSize}px`,\r\n              }}\r\n            >\r\n              {mergeCounterGroup[index] && <p className=\"index\">{mergeCounterGroup[index]}</p>}\r\n              {((mergeComparisonPair[index] && !mergeCounterGroup[index]) || index === quickSwapNode) && (\r\n                <ArrowDropDownIcon className=\"arrow-down\" />\r\n              )}\r\n              <p className=\"value\">{value}</p>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/icon.4f052237.png\";","import { AppBar, Button, IconButton, Slider, Toolbar, Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport './navbar.css';\r\nimport icon from '../../images/icon.png';\r\nimport {\r\n  MAX_ARRAY_SIZE,\r\n  MIN_ARRAY_SIZE,\r\n  MAX_SPEED,\r\n  MIN_SPEED,\r\n  ARRAY_SIZE_SLIDER_JUMP,\r\n  SPEED_SLIDER_JUMP,\r\n  BUBBLE_SORT,\r\n  MERGE_SORT,\r\n  QUICK_SORT,\r\n  INSERTION_SORT,\r\n} from '../../consts';\r\nimport { ActionType } from '../../redux/actionTypes';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React from 'react';\r\n\r\nexport default function NavBar() {\r\n  const speed = useSelector((state: any) => state.speed);\r\n  const arraySize = useSelector((state: any) => state.arraySize);\r\n  const isSorting = useSelector((state: any) => state.isSorting);\r\n  const sortingAlgorithm = useSelector((state: any) => state.sortingAlgorithm);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSizeChange = (_event: any, newArraySize: any) => {\r\n    dispatch({ type: ActionType.SET_ARRAY_SIZE, payload: newArraySize });\r\n    if (isSorting) dispatch({ type: ActionType.END_SORT });\r\n  };\r\n\r\n  const onSpeedChange = (_event: any, newSpeed: any) => {\r\n    dispatch({ type: ActionType.SET_SPEED, payload: newSpeed });\r\n  };\r\n\r\n  const changeArraySize = (value: number) => {\r\n    const newArraySize = arraySize + value;\r\n    if (newArraySize >= MIN_ARRAY_SIZE && newArraySize <= MAX_ARRAY_SIZE) {\r\n      dispatch({ type: ActionType.SET_ARRAY_SIZE, payload: newArraySize });\r\n      if (isSorting) dispatch({ type: ActionType.END_SORT });\r\n    }\r\n  };\r\n\r\n  const changeSpeed = (value: number) => {\r\n    const newSpeed = speed + value;\r\n    if (newSpeed >= MIN_SPEED && newSpeed <= MAX_SPEED) {\r\n      dispatch({ type: ActionType.SET_SPEED, payload: newSpeed });\r\n    }\r\n  };\r\n\r\n  const onSortButtonClicked = (isSorting: boolean) => {\r\n    isSorting ? dispatch({ type: ActionType.END_SORT }) : dispatch({ type: ActionType.START_SORT });\r\n  };\r\n\r\n  const onNewButtonClicked = () => {\r\n    dispatch({ type: ActionType.END_SORT });\r\n    dispatch({ type: ActionType.NEW_ARRAY });\r\n  };\r\n\r\n  const setSortingAlgorithm = (event: React.MouseEvent<HTMLElement>, sortingAlgorithm: string) => {\r\n    if (isSorting) dispatch({ type: ActionType.END_SORT });\r\n    if (sortingAlgorithm) dispatch({ type: ActionType.SET_SORTING_ALGORITHM, payload: sortingAlgorithm });\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\" style={{ minHeight: 128 }}>\r\n        <Grid container spacing={3}>\r\n          <Grid className=\"navbar-header\" item xs={2}>\r\n            <img src={icon} className=\"logo\" alt=\"logo\" />\r\n            <h2>Sort It Out!</h2>\r\n          </Grid>\r\n          <Grid item xs={3} className=\"vertical-align\">\r\n            <div>\r\n              <Typography gutterBottom>Array Size</Typography>\r\n              <Grid container>\r\n                <Grid item>\r\n                  <IconButton\r\n                    aria-label=\"subtract\"\r\n                    style={{ paddingTop: 0 }}\r\n                    color=\"primary\"\r\n                    onClick={() => changeArraySize(-ARRAY_SIZE_SLIDER_JUMP)}\r\n                  >\r\n                    <IndeterminateCheckBoxIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Slider\r\n                    value={arraySize}\r\n                    step={ARRAY_SIZE_SLIDER_JUMP}\r\n                    valueLabelDisplay=\"auto\"\r\n                    min={MIN_ARRAY_SIZE}\r\n                    max={MAX_ARRAY_SIZE}\r\n                    onChange={onSizeChange}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    aria-label=\"add\"\r\n                    color=\"primary\"\r\n                    style={{ paddingTop: 0 }}\r\n                    onClick={() => changeArraySize(ARRAY_SIZE_SLIDER_JUMP)}\r\n                  >\r\n                    <AddBoxIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={3} className=\"vertical-align\">\r\n            <div>\r\n              <Typography gutterBottom>Speed</Typography>\r\n              <Grid container>\r\n                <Grid item>\r\n                  <IconButton\r\n                    aria-label=\"subtract\"\r\n                    color=\"primary\"\r\n                    style={{ paddingTop: 0 }}\r\n                    onClick={() => changeSpeed(-SPEED_SLIDER_JUMP)}\r\n                  >\r\n                    <IndeterminateCheckBoxIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <Slider value={speed} min={MIN_SPEED} max={MAX_SPEED} onChange={onSpeedChange} />\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    aria-label=\"add\"\r\n                    color=\"primary\"\r\n                    style={{ paddingTop: 0 }}\r\n                    onClick={() => changeSpeed(SPEED_SLIDER_JUMP)}\r\n                  >\r\n                    <AddBoxIcon />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Grid>\r\n          <Grid className=\"buttons, vertical-align\" item xs={1}>\r\n            <Button\r\n              variant=\"contained\"\r\n              style={{\r\n                backgroundColor: isSorting ? 'crimson' : 'green',\r\n                color: 'white',\r\n              }}\r\n              onClick={() => onSortButtonClicked(isSorting)}\r\n              endIcon={isSorting ? <StopIcon /> : <PlayArrowIcon />}\r\n            >\r\n              {isSorting ? 'Stop' : 'Start'}\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onNewButtonClicked} endIcon={<CachedIcon />}>\r\n              New\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={3} style={{ textAlign: 'center' }}>\r\n            <ToggleButtonGroup\r\n              className=\"toggle-group\"\r\n              orientation=\"vertical\"\r\n              exclusive\r\n              aria-label=\"Choose Sorting Algorithm\"\r\n              value={sortingAlgorithm}\r\n              onChange={setSortingAlgorithm}\r\n            >\r\n              <ToggleButton value={BUBBLE_SORT} aria-label=\"bubble sort\">\r\n                Bubble Sort\r\n              </ToggleButton>\r\n              <ToggleButton value={MERGE_SORT} aria-label=\"merge sort\">\r\n                Merge Sort\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n            <ToggleButtonGroup\r\n              className=\"toggle-group\"\r\n              orientation=\"vertical\"\r\n              value={sortingAlgorithm}\r\n              exclusive\r\n              onChange={setSortingAlgorithm}\r\n              aria-label=\"Choose Sorting Algorithm\"\r\n            >\r\n              <ToggleButton value={QUICK_SORT} aria-label=\"quick sort\">\r\n                Quick Sort\r\n              </ToggleButton>\r\n              <ToggleButton value={INSERTION_SORT} aria-label=\"some sort\">\r\n                Insertion Sort\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Body from './components/body/Body';\r\nimport NavBar from './components/navbar/NavBar';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <NavBar />\r\n      <Body />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}